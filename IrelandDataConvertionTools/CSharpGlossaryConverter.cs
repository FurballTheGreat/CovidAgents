// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace IrelandDataConversionTools
{
    using System.Linq;
    using System.Collections.Generic;
    using IrelandDataConversionTools;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CSharpGlossaryConverter : CSharpGlossaryConverterBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;

namespace IrelandDataConversionTools
{
    class ShapeFileConverter
    {
        public static void ConvertShapeFile(string pJson, Stream pOutput) {
            using var doc = JsonDocument.Parse(pJson);
            using var writer = new BinaryWriter(pOutput);
            var feautresEl = doc.RootElement.EnumerateObject().FirstOrDefault(pX=>pX.Name==""features"");
            var allPropNames = new List<string>();
            foreach (var featureEl in feautresEl.Value.EnumerateArray())
            {
                var property = featureEl.EnumerateObject().FirstOrDefault(pX=>pX.Name==""properties"");

                var allProps = property.Value.EnumerateObject().ToDictionary(pX=>pX.Name, pX=>pX.Value);
");

   foreach(var theme in Themes) { 
        foreach(var col in theme.Columns) {

            this.Write("                writer.Write(allProps.ContainsKey(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            this.Write("\") ? Int32.Parse(allProps[\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            this.Write("\"].ToString()) : 0);\r\n");
        } 
} 
            this.Write("   \r\n                var gemoetricEl = featureEl.EnumerateObject().FirstOrDefault" +
                    "(pX => pX.Name == \"geometry\");\r\n                var geoType = gemoetricEl.Value." +
                    "EnumerateObject().FirstOrDefault(pX => pX.Name == \"type\").Value\r\n               " +
                    "     .ToString();\r\n                var cordsEl = gemoetricEl.Value.EnumerateObje" +
                    "ct().FirstOrDefault(pX => pX.Name == \"coordinates\");\r\n                var cordsA" +
                    "rr = cordsEl.Value.EnumerateArray().ToArray()[0].EnumerateArray().ToArray();\r\n\r\n" +
                    "                var count = cordsArr.Length;\r\n                writer.Write((Int3" +
                    "2) count);\r\n                if (geoType == \"Polygon\")\r\n                {\r\n      " +
                    "              writer.Write(1);\r\n                    foreach (var coordEl in cord" +
                    "sArr)\r\n                    {\r\n                        Console.WriteLine($\"{coord" +
                    "El}\");\r\n                        foreach (var val in coordEl.EnumerateArray())\r\n " +
                    "                       {\r\n                            var v = val.ToString();\r\n " +
                    "                           writer.Write(double.Parse(v));\r\n                     " +
                    "   }\r\n                    }\r\n                } else if (geoType == \"MultiPolygon" +
                    "\")\r\n                {\r\n                    writer.Write(cordsArr.Length);\r\n     " +
                    "               foreach (var coordEl in cordsArr)\r\n                    {\r\n       " +
                    "                 Console.WriteLine($\"{coordEl}\");\r\n                        forea" +
                    "ch (var val in coordEl.EnumerateArray())\r\n                        {\r\n           " +
                    "                 foreach (var v2 in val.EnumerateArray())\r\n                     " +
                    "       {\r\n                                var v = v2.ToString();\r\n              " +
                    "                  writer.Write(double.Parse(v));\r\n                            }\r" +
                    "\n                        }\r\n                    }\r\n                }\r\n          " +
                    "  }\r\n           \r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }

private global::System.Collections.Generic.List<IrelandDataConversionTools.GlossaryTheme> _ThemesField;

/// <summary>
/// Access the Themes parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<IrelandDataConversionTools.GlossaryTheme> Themes
{
    get
    {
        return this._ThemesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ThemesValueAcquired = false;
if (this.Session.ContainsKey("Themes"))
{
    this._ThemesField = ((global::System.Collections.Generic.List<IrelandDataConversionTools.GlossaryTheme>)(this.Session["Themes"]));
    ThemesValueAcquired = true;
}
if ((ThemesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Themes");
    if ((data != null))
    {
        this._ThemesField = ((global::System.Collections.Generic.List<IrelandDataConversionTools.GlossaryTheme>)(data));
    }
}


    }
}


    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CSharpGlossaryConverterBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
